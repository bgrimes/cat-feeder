!function e(t, n, r) {
    function s(o, u) {
        if (!n[o]) {
            if (!t[o]) {
                var a = "function" == typeof require && require;
                if (!u && a) return a(o, !0);
                if (i) return i(o, !0);
                throw new Error("Cannot find module '" + o + "'");
            }
            var f = n[o] = {
                exports: {}
            };
            t[o][0].call(f.exports, function(e) {
                var n = t[o][1][e];
                return s(n ? n : e);
            }, f, f.exports, e, t, n, r);
        }
        return n[o].exports;
    }
    for (var i = "function" == typeof require && require, o = 0; o < r.length; o++) s(r[o]);
    return s;
}({
    1: [ function(require) {
        App = Em.Application.create({}), App.Router = require("./router"), App.IndexRoute = require("./routes/index_route"), 
        App.ApplicationController = require("./controllers/application_controller");
    }, {
        "./controllers/application_controller": 2,
        "./router": 3,
        "./routes/index_route": 4
    } ],
    2: [ function(require, module) {
        module.exports = Ember.Controller.extend({});
    }, {} ],
    3: [ function(require, module) {
        var Router = Ember.Router.extend({});
        module.exports = Router;
    }, {} ],
    4: [ function(require, module) {
        var IndexRoute = Ember.Route.extend({});
        module.exports = IndexRoute;
    }, {} ]
}, {}, [ 1, 3 ]), Ember.TEMPLATES.application = Ember.Handlebars.template(function(Handlebars, depth0, helpers, partials, data) {
    function program1(depth0, data) {
        var stack1, helper, options, buffer = "";
        return data.buffer.push("\n              "), helper = helpers["link-to"] || depth0 && depth0["link-to"], 
        options = {
            hash: {},
            hashTypes: {},
            hashContexts: {},
            inverse: self.noop,
            fn: self.program(2, program2, data),
            contexts: [ depth0 ],
            types: [ "STRING" ],
            data: data
        }, stack1 = helper ? helper.call(depth0, "index", options) : helperMissing.call(depth0, "link-to", "index", options), 
        (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("\n            "), 
        buffer;
    }
    function program2(depth0, data) {
        data.buffer.push("Home");
    }
    this.compilerInfo = [ 4, ">= 1.0.0" ], helpers = this.merge(helpers, Ember.Handlebars.helpers), 
    data = data || {};
    var stack1, helper, options, buffer = "", self = this, helperMissing = helpers.helperMissing;
    return data.buffer.push('\n    <!-- Fixed navbar -->\n    <div class="navbar navbar-default navbar-fixed-top" role="navigation">\n      <div class="container">\n        <div class="navbar-header">\n          <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">\n            <span class="sr-only">Toggle navigation</span>\n            <span class="icon-bar"></span>\n            <span class="icon-bar"></span>\n            <span class="icon-bar"></span>\n          </button>\n          <a class="navbar-brand" href="#">Cat Feeder</a>\n        </div>\n        <div class="collapse navbar-collapse">\n          <ul class="nav navbar-nav">\n            \n            '), 
    helper = helpers.linkTo || depth0 && depth0.linkTo, options = {
        hash: {
            tagName: "li"
        },
        hashTypes: {
            tagName: "STRING"
        },
        hashContexts: {
            tagName: depth0
        },
        inverse: self.noop,
        fn: self.program(1, program1, data),
        contexts: [ depth0 ],
        types: [ "STRING" ],
        data: data
    }, stack1 = helper ? helper.call(depth0, "index", options) : helperMissing.call(depth0, "linkTo", "index", options), 
    (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push('\n          </ul>\n\n          <form class="navbar-form navbar-right" action="/logout" role="logout">\n            <button class=\'btn btn-info\' href="/logout"><i class=\'fa fa-sign-out\'></i> Logout</button>\n          </form>\n        </div><!--/.nav-collapse -->\n\n\n      </div>\n    </div>\n\n    <!-- Begin page content -->\n    <div class="container">\n      '), 
    stack1 = helpers._triageMustache.call(depth0, "outlet", {
        hash: {},
        hashTypes: {},
        hashContexts: {},
        contexts: [ depth0 ],
        types: [ "ID" ],
        data: data
    }), (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push('\n    </div>\n\n    <div id="footer">\n      <div class="container">\n        <p class="text-muted">Food food food food food food.</p>\n      </div>\n    </div>\n'), 
    buffer;
}), Ember.TEMPLATES.error = Ember.Handlebars.template(function(Handlebars, depth0, helpers, partials, data) {
    this.compilerInfo = [ 4, ">= 1.0.0" ], helpers = this.merge(helpers, Ember.Handlebars.helpers), 
    data = data || {}, data.buffer.push("Error\n");
}), Ember.TEMPLATES.index = Ember.Handlebars.template(function(Handlebars, depth0, helpers, partials, data) {
    this.compilerInfo = [ 4, ">= 1.0.0" ], helpers = this.merge(helpers, Ember.Handlebars.helpers), 
    data = data || {}, data.buffer.push('<div class="jumbotron">\n  <h1>:3 i can haz cheezburger?</h1>\n</div>\n');
}), Ember.TEMPLATES.loading = Ember.Handlebars.template(function(Handlebars, depth0, helpers, partials, data) {
    this.compilerInfo = [ 4, ">= 1.0.0" ], helpers = this.merge(helpers, Ember.Handlebars.helpers), 
    data = data || {}, data.buffer.push('<i class="fa fa-spinner fa-spin"></i>\n');
});