!function e(t, n, r) {
    function s(o, u) {
        if (!n[o]) {
            if (!t[o]) {
                var a = "function" == typeof require && require;
                if (!u && a) return a(o, !0);
                if (i) return i(o, !0);
                throw new Error("Cannot find module '" + o + "'");
            }
            var f = n[o] = {
                exports: {}
            };
            t[o][0].call(f.exports, function(e) {
                var n = t[o][1][e];
                return s(n ? n : e);
            }, f, f.exports, e, t, n, r);
        }
        return n[o].exports;
    }
    for (var i = "function" == typeof require && require, o = 0; o < r.length; o++) s(r[o]);
    return s;
}({
    1: [ function(require, module) {
        module.exports = DS.FixtureAdapter.extend();
    }, {} ],
    2: [ function(require) {
        App = Em.Application.create({}), App.Router = require("./router"), App.JobsRoute = require("./routes/jobs_route"), 
        App.ManualRoute = require("./routes/manual_route"), App.FeedersRoute = require("./routes/feeders_route"), 
        App.UserRoute = require("./routes/user_route"), App.ApplicationController = require("./controllers/application_controller"), 
        App.FeederController = require("./controllers/feeder_controller"), App.FeedersController = require("./controllers/feeders_controller"), 
        App.UserController = require("./controllers/user_controller"), App.JobsController = require("./controllers/jobs_controller"), 
        App.JobController = require("./controllers/job_controller"), App.Feeder = require("./models/feeder"), 
        App.User = require("./models/user"), App.Job = require("./models/job"), App.ApplicationAdapter = require("./adapters/application_adapter"), 
        Ember.Handlebars.helper("moment_from_now", require("./helpers/handlebars/moment_from_now"));
    }, {
        "./adapters/application_adapter": 1,
        "./controllers/application_controller": 3,
        "./controllers/feeder_controller": 4,
        "./controllers/feeders_controller": 5,
        "./controllers/job_controller": 6,
        "./controllers/jobs_controller": 7,
        "./controllers/user_controller": 8,
        "./helpers/handlebars/moment_from_now": 9,
        "./models/feeder": 10,
        "./models/job": 11,
        "./models/user": 12,
        "./router": 13,
        "./routes/feeders_route": 14,
        "./routes/jobs_route": 15,
        "./routes/manual_route": 16,
        "./routes/user_route": 17
    } ],
    3: [ function(require, module) {
        module.exports = Ember.Controller.extend({});
    }, {} ],
    4: [ function(require, module) {
        var FeederController = Ember.ObjectController.extend({
            needs: [ "user" ],
            isEditing: !1,
            onInit: function() {
                Ember.run.scheduleOnce("afterRender", this, function() {
                    var feeder = this.get("model"), name = feeder.get("name");
                    "undefined" != typeof name && name.trim() || this.set("isEditing", !0);
                });
            }.on("init"),
            actions: {
                editFeeder: function() {
                    this.set("isEditing", !0);
                },
                cancelEdit: function() {
                    var feeder = this.get("model");
                    feeder.get("isNew") ? feeder.deleteRecord() : feeder.rollback(), this.set("isEditing", !1);
                },
                saveFeeder: function() {
                    var feeder = this.get("model"), isDirty = feeder.get("isDirty"), isNew = feeder.get("isNew"), isSaving = feeder.get("isSaving"), self = this;
                    if (!isSaving) return isDirty ? void this.get("controllers.user.currentUser").then(function(currentUser) {
                        feeder.set("updatedBy", currentUser), isNew && feeder.set("createdBy", currentUser), 
                        feeder.save().then(function() {
                            self.set("isEditing", !1);
                        });
                    }) : void this.set("isEditing", !1);
                },
                deleteFeeder: function() {
                    this.get("model");
                }
            }
        });
        module.exports = FeederController;
    }, {} ],
    5: [ function(require, module) {
        var FeedersController = Ember.ArrayController.extend({
            needs: [ "user" ],
            actions: {
                createFeeder: function() {
                    this.store.createRecord("feeder");
                }
            }
        });
        module.exports = FeedersController;
    }, {} ],
    6: [ function(require, module) {
        var JobController = Ember.ObjectController.extend({
            needs: [ "user" ],
            isEditing: !1,
            onInit: function() {
                Ember.run.scheduleOnce("afterRender", this, function() {
                    var job = this.get("model"), name = job.get("name");
                    "undefined" != typeof name && name.trim() || this.set("isEditing", !0);
                });
            }.on("init"),
            actions: {
                editJob: function() {
                    this.set("isEditing", !0);
                },
                cancelEdit: function() {
                    var job = this.get("model");
                    job.get("isNew") ? job.deleteRecord() : job.rollback(), this.set("isEditing", !1);
                },
                saveJob: function() {
                    var job = this.get("model"), isDirty = job.get("isDirty"), isNew = job.get("isNew"), isSaving = job.get("isSaving"), self = this;
                    if (!isSaving) return isDirty ? void this.get("controllers.user.currentUser").then(function(currentUser) {
                        job.set("updatedBy", currentUser), isNew && job.set("createdBy", currentUser), job.save().then(function() {
                            self.set("isEditing", !1);
                        });
                    }) : void this.set("isEditing", !1);
                },
                deleteJob: function() {
                    this.get("model");
                }
            }
        });
        module.exports = JobController;
    }, {} ],
    7: [ function(require, module) {
        var JobsController = Ember.ArrayController.extend({
            actions: {
                createJob: function() {
                    this.store.createRecord("job");
                }
            }
        });
        module.exports = JobsController;
    }, {} ],
    8: [ function(require, module) {
        var UserController = Ember.ArrayController.extend({
            currentUser: function() {
                return this.store.find("user", 1);
            }.property()
        });
        module.exports = UserController;
    }, {} ],
    9: [ function(require, module) {
        module.exports = function(time) {
            return moment(time).fromNow();
        };
    }, {} ],
    10: [ function(require, module) {
        var Feeder = DS.Model.extend({
            name: DS.attr("string"),
            deviceId: DS.attr("string"),
            apiToken: DS.attr("string"),
            createdBy: DS.belongsTo("user"),
            updatedBy: DS.belongsTo("user"),
            createdAt: DS.attr("string"),
            updatedAt: DS.attr("string")
        });
        Feeder.FIXTURES = [ {
            id: 1,
            name: "Cat 1 Feeder",
            deviceId: "123456",
            apiToken: "CDF35E9243",
            createdBy: 1,
            updatedBy: 1,
            createdAt: "2014-03-08 12:23:59",
            updatedAt: "2014-03-08 12:23:59"
        }, {
            id: 2,
            name: "Cat 2 Feeder",
            deviceId: "314159",
            apiToken: "A98THE34G",
            createdBy: 1,
            updatedBy: 1,
            createdAt: "2014-03-08 12:25:59",
            updatedAt: "2014-03-08 12:25:59"
        } ], module.exports = Feeder;
    }, {} ],
    11: [ function(require, module) {
        var Job = DS.Model.extend({
            name: DS.attr("string"),
            scheduledFor: DS.attr("string"),
            createdBy: DS.belongsTo("user"),
            updatedBy: DS.belongsTo("user"),
            createdAt: DS.attr("string"),
            updatedAt: DS.attr("string")
        });
        Job.FIXTURES = [ {
            id: 1,
            name: "Morning Feeding",
            scheduledFor: "06:00",
            createdBy: 1,
            updatedBy: 1,
            createdAt: "2014-03-08 12:23:59",
            updatedAt: "2014-03-08 12:23:59"
        }, {
            id: 2,
            name: "Evening Feeding",
            scheduledFor: "17:00",
            createdBy: 1,
            updatedBy: 1,
            createdAt: "2014-03-08 12:23:59",
            updatedAt: "2014-03-08 12:23:59"
        } ], module.exports = Job;
    }, {} ],
    12: [ function(require, module) {
        var attr = DS.attr, User = DS.Model.extend({
            firstName: attr("string"),
            lastName: attr("string"),
            email: attr("string"),
            fullName: function() {
                return "%@ %@".fmt(this.get("firstName"), this.get("lastName"));
            }.property("firstName", "lastName")
        });
        User.FIXTURES = [ {
            id: 1,
            firstName: "Ben",
            lastName: "Grimes",
            email: "bgrimes@gmail.com"
        }, {
            id: 2,
            firstName: "Bob",
            lastName: "Saget",
            email: "bjes@gmail.com"
        } ], module.exports = User;
    }, {} ],
    13: [ function(require, module) {
        var Router = Ember.Router.extend({});
        Router.map(function() {
            this.resource("jobs", {
                path: "/jobs"
            }), this.resource("feeders", {
                path: "/feeders"
            }), this.resource("user", {
                path: "/user"
            }), this.route("manual", {
                path: "/manual"
            });
        }), module.exports = Router;
    }, {} ],
    14: [ function(require, module) {
        module.exports = Ember.Route.extend({
            model: function() {
                return this.store.find("feeder");
            }
        });
    }, {} ],
    15: [ function(require, module) {
        module.exports = Ember.Route.extend({
            model: function() {
                return this.store.find("job");
            }
        });
    }, {} ],
    16: [ function(require, module) {
        module.exports = Ember.Route.extend({});
    }, {} ],
    17: [ function(require, module) {
        module.exports = Ember.Route.extend({
            model: function() {
                return this.store.find("user");
            }
        });
    }, {} ]
}, {}, [ 2, 13 ]), Ember.TEMPLATES.application = Ember.Handlebars.template(function(Handlebars, depth0, helpers, partials, data) {
    function program1(depth0, data) {
        var stack1, helper, options, buffer = "";
        return data.buffer.push("\n              "), helper = helpers["link-to"] || depth0 && depth0["link-to"], 
        options = {
            hash: {},
            hashTypes: {},
            hashContexts: {},
            inverse: self.noop,
            fn: self.program(2, program2, data),
            contexts: [ depth0 ],
            types: [ "STRING" ],
            data: data
        }, stack1 = helper ? helper.call(depth0, "index", options) : helperMissing.call(depth0, "link-to", "index", options), 
        (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("\n            "), 
        buffer;
    }
    function program2(depth0, data) {
        data.buffer.push("Home");
    }
    function program4(depth0, data) {
        var stack1, helper, options, buffer = "";
        return data.buffer.push("\n              "), helper = helpers["link-to"] || depth0 && depth0["link-to"], 
        options = {
            hash: {},
            hashTypes: {},
            hashContexts: {},
            inverse: self.noop,
            fn: self.program(5, program5, data),
            contexts: [ depth0 ],
            types: [ "STRING" ],
            data: data
        }, stack1 = helper ? helper.call(depth0, "feeders", options) : helperMissing.call(depth0, "link-to", "feeders", options), 
        (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("\n            "), 
        buffer;
    }
    function program5(depth0, data) {
        data.buffer.push("Feeders");
    }
    function program7(depth0, data) {
        var stack1, helper, options, buffer = "";
        return data.buffer.push("\n              "), helper = helpers["link-to"] || depth0 && depth0["link-to"], 
        options = {
            hash: {},
            hashTypes: {},
            hashContexts: {},
            inverse: self.noop,
            fn: self.program(8, program8, data),
            contexts: [ depth0 ],
            types: [ "STRING" ],
            data: data
        }, stack1 = helper ? helper.call(depth0, "jobs", options) : helperMissing.call(depth0, "link-to", "jobs", options), 
        (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("\n            "), 
        buffer;
    }
    function program8(depth0, data) {
        data.buffer.push("Jobs");
    }
    function program10(depth0, data) {
        var stack1, helper, options, buffer = "";
        return data.buffer.push("\n              "), helper = helpers["link-to"] || depth0 && depth0["link-to"], 
        options = {
            hash: {},
            hashTypes: {},
            hashContexts: {},
            inverse: self.noop,
            fn: self.program(11, program11, data),
            contexts: [ depth0 ],
            types: [ "STRING" ],
            data: data
        }, stack1 = helper ? helper.call(depth0, "manual", options) : helperMissing.call(depth0, "link-to", "manual", options), 
        (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("\n            "), 
        buffer;
    }
    function program11(depth0, data) {
        data.buffer.push("Manual");
    }
    function program13(depth0, data) {
        var stack1, helper, options, buffer = "";
        return data.buffer.push("\n              "), helper = helpers["link-to"] || depth0 && depth0["link-to"], 
        options = {
            hash: {},
            hashTypes: {},
            hashContexts: {},
            inverse: self.noop,
            fn: self.program(14, program14, data),
            contexts: [ depth0 ],
            types: [ "STRING" ],
            data: data
        }, stack1 = helper ? helper.call(depth0, "user", options) : helperMissing.call(depth0, "link-to", "user", options), 
        (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("\n            "), 
        buffer;
    }
    function program14(depth0, data) {
        data.buffer.push("Users");
    }
    this.compilerInfo = [ 4, ">= 1.0.0" ], helpers = this.merge(helpers, Ember.Handlebars.helpers), 
    data = data || {};
    var stack1, helper, options, buffer = "", self = this, helperMissing = helpers.helperMissing;
    return data.buffer.push('\n    <!-- Fixed navbar -->\n    <div class="navbar navbar-default navbar-fixed-top" role="navigation">\n      <div class="container">\n        <div class="navbar-header">\n          <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">\n            <span class="sr-only">Toggle navigation</span>\n            <span class="icon-bar"></span>\n            <span class="icon-bar"></span>\n            <span class="icon-bar"></span>\n          </button>\n          <a class="navbar-brand" href="#">Cat Feeder</a>\n        </div>\n        <div class="collapse navbar-collapse">\n          <ul class="nav navbar-nav">\n            \n            '), 
    helper = helpers["link-to"] || depth0 && depth0["link-to"], options = {
        hash: {
            tagName: "li"
        },
        hashTypes: {
            tagName: "STRING"
        },
        hashContexts: {
            tagName: depth0
        },
        inverse: self.noop,
        fn: self.program(1, program1, data),
        contexts: [ depth0 ],
        types: [ "STRING" ],
        data: data
    }, stack1 = helper ? helper.call(depth0, "index", options) : helperMissing.call(depth0, "link-to", "index", options), 
    (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("\n\n            "), 
    helper = helpers["link-to"] || depth0 && depth0["link-to"], options = {
        hash: {
            tagName: "li"
        },
        hashTypes: {
            tagName: "STRING"
        },
        hashContexts: {
            tagName: depth0
        },
        inverse: self.noop,
        fn: self.program(4, program4, data),
        contexts: [ depth0 ],
        types: [ "STRING" ],
        data: data
    }, stack1 = helper ? helper.call(depth0, "feeders", options) : helperMissing.call(depth0, "link-to", "feeders", options), 
    (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("\n\n            "), 
    helper = helpers["link-to"] || depth0 && depth0["link-to"], options = {
        hash: {
            tagName: "li"
        },
        hashTypes: {
            tagName: "STRING"
        },
        hashContexts: {
            tagName: depth0
        },
        inverse: self.noop,
        fn: self.program(7, program7, data),
        contexts: [ depth0 ],
        types: [ "STRING" ],
        data: data
    }, stack1 = helper ? helper.call(depth0, "jobs", options) : helperMissing.call(depth0, "link-to", "jobs", options), 
    (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("\n\n            "), 
    helper = helpers["link-to"] || depth0 && depth0["link-to"], options = {
        hash: {
            tagName: "li"
        },
        hashTypes: {
            tagName: "STRING"
        },
        hashContexts: {
            tagName: depth0
        },
        inverse: self.noop,
        fn: self.program(10, program10, data),
        contexts: [ depth0 ],
        types: [ "STRING" ],
        data: data
    }, stack1 = helper ? helper.call(depth0, "manual", options) : helperMissing.call(depth0, "link-to", "manual", options), 
    (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("\n\n            "), 
    helper = helpers["link-to"] || depth0 && depth0["link-to"], options = {
        hash: {
            tagName: "li"
        },
        hashTypes: {
            tagName: "STRING"
        },
        hashContexts: {
            tagName: depth0
        },
        inverse: self.noop,
        fn: self.program(13, program13, data),
        contexts: [ depth0 ],
        types: [ "STRING" ],
        data: data
    }, stack1 = helper ? helper.call(depth0, "user", options) : helperMissing.call(depth0, "link-to", "user", options), 
    (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push('\n          </ul>\n\n          <form class="navbar-form navbar-right" action="/logout" role="logout">\n            <button class=\'btn btn-info\' href="/logout"><i class=\'fa fa-sign-out\'></i> Logout</button>\n          </form>\n        </div><!--/.nav-collapse -->\n\n\n      </div>\n    </div>\n\n    <!-- Begin page content -->\n    <div class="container">\n      '), 
    stack1 = helpers._triageMustache.call(depth0, "outlet", {
        hash: {},
        hashTypes: {},
        hashContexts: {},
        contexts: [ depth0 ],
        types: [ "ID" ],
        data: data
    }), (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push('\n    </div>\n\n    <div id="footer">\n      <div class="container">\n        <p class="text-muted">Food food food food food food.</p>\n      </div>\n    </div>\n'), 
    buffer;
}), Ember.TEMPLATES.error = Ember.Handlebars.template(function(Handlebars, depth0, helpers, partials, data) {
    this.compilerInfo = [ 4, ">= 1.0.0" ], helpers = this.merge(helpers, Ember.Handlebars.helpers), 
    data = data || {}, data.buffer.push("Error\n");
}), Ember.TEMPLATES.feeders = Ember.Handlebars.template(function(Handlebars, depth0, helpers, partials, data) {
    function program1(depth0, data) {
        var stack1, buffer = "";
        return data.buffer.push("\n    "), stack1 = helpers["if"].call(depth0, "isEditing", {
            hash: {},
            hashTypes: {},
            hashContexts: {},
            inverse: self.program(4, program4, data),
            fn: self.program(2, program2, data),
            contexts: [ depth0 ],
            types: [ "ID" ],
            data: data
        }), (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("\n  "), 
        buffer;
    }
    function program2(depth0, data) {
        var helper, options, buffer = "";
        return data.buffer.push('\n    <tr class="editing">\n      <td>'), data.buffer.push(escapeExpression((helper = helpers.input || depth0 && depth0.input, 
        options = {
            hash: {
                type: "text",
                valueBinding: "name",
                action: "saveFeeder",
                placeholder: "Name",
                disabledBinding: "isSaving",
                "class": "form-control"
            },
            hashTypes: {
                type: "STRING",
                valueBinding: "STRING",
                action: "STRING",
                placeholder: "STRING",
                disabledBinding: "STRING",
                "class": "STRING"
            },
            hashContexts: {
                type: depth0,
                valueBinding: depth0,
                action: depth0,
                placeholder: depth0,
                disabledBinding: depth0,
                "class": depth0
            },
            contexts: [],
            types: [],
            data: data
        }, helper ? helper.call(depth0, options) : helperMissing.call(depth0, "input", options)))), 
        data.buffer.push("</td>\n      <td>"), data.buffer.push(escapeExpression((helper = helpers.input || depth0 && depth0.input, 
        options = {
            hash: {
                type: "text",
                valueBinding: "deviceId",
                action: "saveFeeder",
                placeholder: "Device ID",
                disabledBinding: "isSaving",
                "class": "form-control"
            },
            hashTypes: {
                type: "STRING",
                valueBinding: "STRING",
                action: "STRING",
                placeholder: "STRING",
                disabledBinding: "STRING",
                "class": "STRING"
            },
            hashContexts: {
                type: depth0,
                valueBinding: depth0,
                action: depth0,
                placeholder: depth0,
                disabledBinding: depth0,
                "class": depth0
            },
            contexts: [],
            types: [],
            data: data
        }, helper ? helper.call(depth0, options) : helperMissing.call(depth0, "input", options)))), 
        data.buffer.push("</td>\n      <td>"), data.buffer.push(escapeExpression((helper = helpers.input || depth0 && depth0.input, 
        options = {
            hash: {
                type: "text",
                valueBinding: "apiToken",
                action: "saveFeeder",
                placeholder: "API Token",
                disabledBinding: "isSaving",
                "class": "form-control"
            },
            hashTypes: {
                type: "STRING",
                valueBinding: "STRING",
                action: "STRING",
                placeholder: "STRING",
                disabledBinding: "STRING",
                "class": "STRING"
            },
            hashContexts: {
                type: depth0,
                valueBinding: depth0,
                action: depth0,
                placeholder: depth0,
                disabledBinding: depth0,
                "class": depth0
            },
            contexts: [],
            types: [],
            data: data
        }, helper ? helper.call(depth0, options) : helperMissing.call(depth0, "input", options)))), 
        data.buffer.push('</td>\n      <td></td>\n      <td></td>\n      <td></td>\n      <td></td>\n      <td>\n        <div class="btn-group btn-group-xs">\n          <div '), 
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            hash: {
                "class": ":btn :btn-success isSaving:disabled"
            },
            hashTypes: {
                "class": "STRING"
            },
            hashContexts: {
                "class": depth0
            },
            contexts: [],
            types: [],
            data: data
        }))), data.buffer.push(" "), data.buffer.push(escapeExpression(helpers.action.call(depth0, "saveFeeder", {
            hash: {},
            hashTypes: {},
            hashContexts: {},
            contexts: [ depth0 ],
            types: [ "STRING" ],
            data: data
        }))), data.buffer.push("><i class='fa fa-save'></i></div>\n          <div class='btn btn-danger' "), 
        data.buffer.push(escapeExpression(helpers.action.call(depth0, "cancelEdit", {
            hash: {},
            hashTypes: {},
            hashContexts: {},
            contexts: [ depth0 ],
            types: [ "STRING" ],
            data: data
        }))), data.buffer.push("><i class='fa fa-times'></i></div>\n        </div>\n      </td>\n    </tr>\n    "), 
        buffer;
    }
    function program4(depth0, data) {
        var stack1, helper, options, buffer = "";
        return data.buffer.push("\n    <tr "), data.buffer.push(escapeExpression(helpers.action.call(depth0, "editFeeder", {
            hash: {
                on: "doubleClick"
            },
            hashTypes: {
                on: "STRING"
            },
            hashContexts: {
                on: depth0
            },
            contexts: [ depth0 ],
            types: [ "STRING" ],
            data: data
        }))), data.buffer.push(">\n      <td>"), stack1 = helpers._triageMustache.call(depth0, "name", {
            hash: {},
            hashTypes: {},
            hashContexts: {},
            contexts: [ depth0 ],
            types: [ "ID" ],
            data: data
        }), (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("</td>\n      <td>"), 
        stack1 = helpers._triageMustache.call(depth0, "deviceId", {
            hash: {},
            hashTypes: {},
            hashContexts: {},
            contexts: [ depth0 ],
            types: [ "ID" ],
            data: data
        }), (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("</td>\n      <td>"), 
        stack1 = helpers._triageMustache.call(depth0, "apiToken", {
            hash: {},
            hashTypes: {},
            hashContexts: {},
            contexts: [ depth0 ],
            types: [ "ID" ],
            data: data
        }), (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("</td>\n      <td>"), 
        data.buffer.push(escapeExpression((helper = helpers.moment_from_now || depth0 && depth0.moment_from_now, 
        options = {
            hash: {},
            hashTypes: {},
            hashContexts: {},
            contexts: [ depth0 ],
            types: [ "ID" ],
            data: data
        }, helper ? helper.call(depth0, "updatedAt", options) : helperMissing.call(depth0, "moment_from_now", "updatedAt", options)))), 
        data.buffer.push("</td>\n      <td>"), stack1 = helpers._triageMustache.call(depth0, "updatedBy.firstName", {
            hash: {},
            hashTypes: {},
            hashContexts: {},
            contexts: [ depth0 ],
            types: [ "ID" ],
            data: data
        }), (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("</td>\n      <td>"), 
        data.buffer.push(escapeExpression((helper = helpers.moment_from_now || depth0 && depth0.moment_from_now, 
        options = {
            hash: {},
            hashTypes: {},
            hashContexts: {},
            contexts: [ depth0 ],
            types: [ "ID" ],
            data: data
        }, helper ? helper.call(depth0, "createdAt", options) : helperMissing.call(depth0, "moment_from_now", "createdAt", options)))), 
        data.buffer.push("</td>\n      <td>"), stack1 = helpers._triageMustache.call(depth0, "createdBy.firstName", {
            hash: {},
            hashTypes: {},
            hashContexts: {},
            contexts: [ depth0 ],
            types: [ "ID" ],
            data: data
        }), (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("</td>\n      <td>\n        <div class=\"btn-group btn-group-xs\">\n          <div class='btn btn-default' "), 
        data.buffer.push(escapeExpression(helpers.action.call(depth0, "editFeeder", {
            hash: {},
            hashTypes: {},
            hashContexts: {},
            contexts: [ depth0 ],
            types: [ "STRING" ],
            data: data
        }))), data.buffer.push("><i class='fa fa-pencil'></i></div>\n          <div class='btn btn-danger' "), 
        data.buffer.push(escapeExpression(helpers.action.call(depth0, "deleteFeeder", {
            hash: {},
            hashTypes: {},
            hashContexts: {},
            contexts: [ depth0 ],
            types: [ "STRING" ],
            data: data
        }))), data.buffer.push("><i class='fa fa-eraser'></i></div>\n        </div>\n      </td>\n    </tr>\n    "), 
        buffer;
    }
    this.compilerInfo = [ 4, ">= 1.0.0" ], helpers = this.merge(helpers, Ember.Handlebars.helpers), 
    data = data || {};
    var stack1, buffer = "", helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression, self = this;
    return data.buffer.push('<table class="table table-hover">\n  <thead>\n    <tr>\n      <th>Name</th>\n      <th>Device Id</th>\n      <th>API Token</th>\n      <th>Updated</th>\n      <th>Updated By</th>\n      <th>Created</th>\n      <th>Created By</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n  '), 
    stack1 = helpers.each.call(depth0, {
        hash: {
            itemController: "feeder"
        },
        hashTypes: {
            itemController: "STRING"
        },
        hashContexts: {
            itemController: depth0
        },
        inverse: self.noop,
        fn: self.program(1, program1, data),
        contexts: [],
        types: [],
        data: data
    }), (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("\n  </tbody>\n</table>\n\n<div class='btn btn-success' "), 
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "createFeeder", {
        hash: {},
        hashTypes: {},
        hashContexts: {},
        contexts: [ depth0 ],
        types: [ "STRING" ],
        data: data
    }))), data.buffer.push('><i class="fa fa-plus"></i> Add New Feeder</div>\n'), buffer;
}), Ember.TEMPLATES.index = Ember.Handlebars.template(function(Handlebars, depth0, helpers, partials, data) {
    this.compilerInfo = [ 4, ">= 1.0.0" ], helpers = this.merge(helpers, Ember.Handlebars.helpers), 
    data = data || {}, data.buffer.push('<div class="jumbotron">\n  <h1>:3 i can haz cheezburger?</h1>\n</div>\n');
}), Ember.TEMPLATES.jobs = Ember.Handlebars.template(function(Handlebars, depth0, helpers, partials, data) {
    function program1(depth0, data) {
        var stack1, buffer = "";
        return data.buffer.push("\n    "), stack1 = helpers["if"].call(depth0, "isEditing", {
            hash: {},
            hashTypes: {},
            hashContexts: {},
            inverse: self.program(4, program4, data),
            fn: self.program(2, program2, data),
            contexts: [ depth0 ],
            types: [ "ID" ],
            data: data
        }), (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("\n  "), 
        buffer;
    }
    function program2(depth0, data) {
        var helper, options, buffer = "";
        return data.buffer.push('\n    <tr class="editing">\n      <td>'), data.buffer.push(escapeExpression((helper = helpers.input || depth0 && depth0.input, 
        options = {
            hash: {
                type: "text",
                valueBinding: "name",
                action: "saveJob",
                placeholder: "Name",
                disabledBinding: "isSaving",
                "class": "form-control"
            },
            hashTypes: {
                type: "STRING",
                valueBinding: "STRING",
                action: "STRING",
                placeholder: "STRING",
                disabledBinding: "STRING",
                "class": "STRING"
            },
            hashContexts: {
                type: depth0,
                valueBinding: depth0,
                action: depth0,
                placeholder: depth0,
                disabledBinding: depth0,
                "class": depth0
            },
            contexts: [],
            types: [],
            data: data
        }, helper ? helper.call(depth0, options) : helperMissing.call(depth0, "input", options)))), 
        data.buffer.push("</td>\n      <td>"), data.buffer.push(escapeExpression((helper = helpers.input || depth0 && depth0.input, 
        options = {
            hash: {
                type: "text",
                valueBinding: "scheduledFor",
                action: "saveJob",
                placeholder: "Schedule At (eg 05:00)",
                disabledBinding: "isSaving",
                "class": "form-control"
            },
            hashTypes: {
                type: "STRING",
                valueBinding: "STRING",
                action: "STRING",
                placeholder: "STRING",
                disabledBinding: "STRING",
                "class": "STRING"
            },
            hashContexts: {
                type: depth0,
                valueBinding: depth0,
                action: depth0,
                placeholder: depth0,
                disabledBinding: depth0,
                "class": depth0
            },
            contexts: [],
            types: [],
            data: data
        }, helper ? helper.call(depth0, options) : helperMissing.call(depth0, "input", options)))), 
        data.buffer.push('</td>\n      <td></td>\n      <td></td>\n      <td></td>\n      <td></td>\n      <td>\n        <div class="btn-group btn-group-xs">\n          <div '), 
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            hash: {
                "class": ":btn :btn-success isSaving:disabled"
            },
            hashTypes: {
                "class": "STRING"
            },
            hashContexts: {
                "class": depth0
            },
            contexts: [],
            types: [],
            data: data
        }))), data.buffer.push(" "), data.buffer.push(escapeExpression(helpers.action.call(depth0, "saveJob", {
            hash: {},
            hashTypes: {},
            hashContexts: {},
            contexts: [ depth0 ],
            types: [ "STRING" ],
            data: data
        }))), data.buffer.push("><i class='fa fa-save'></i></div>\n          <div class='btn btn-danger' "), 
        data.buffer.push(escapeExpression(helpers.action.call(depth0, "cancelEdit", {
            hash: {},
            hashTypes: {},
            hashContexts: {},
            contexts: [ depth0 ],
            types: [ "STRING" ],
            data: data
        }))), data.buffer.push("><i class='fa fa-times'></i></div>\n        </div>\n      </td>\n    </tr>\n    "), 
        buffer;
    }
    function program4(depth0, data) {
        var stack1, helper, options, buffer = "";
        return data.buffer.push("\n    <tr "), data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            hash: {
                "class": "isEditing:editing"
            },
            hashTypes: {
                "class": "STRING"
            },
            hashContexts: {
                "class": depth0
            },
            contexts: [],
            types: [],
            data: data
        }))), data.buffer.push(" "), data.buffer.push(escapeExpression(helpers.action.call(depth0, "editJob", {
            hash: {
                on: "doubleClick"
            },
            hashTypes: {
                on: "STRING"
            },
            hashContexts: {
                on: depth0
            },
            contexts: [ depth0 ],
            types: [ "STRING" ],
            data: data
        }))), data.buffer.push(">\n      <td>"), stack1 = helpers._triageMustache.call(depth0, "name", {
            hash: {},
            hashTypes: {},
            hashContexts: {},
            contexts: [ depth0 ],
            types: [ "ID" ],
            data: data
        }), (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("</td>\n      <td>"), 
        stack1 = helpers._triageMustache.call(depth0, "scheduledFor", {
            hash: {},
            hashTypes: {},
            hashContexts: {},
            contexts: [ depth0 ],
            types: [ "ID" ],
            data: data
        }), (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("</td>\n      <td>"), 
        data.buffer.push(escapeExpression((helper = helpers.moment_from_now || depth0 && depth0.moment_from_now, 
        options = {
            hash: {},
            hashTypes: {},
            hashContexts: {},
            contexts: [ depth0 ],
            types: [ "ID" ],
            data: data
        }, helper ? helper.call(depth0, "updatedAt", options) : helperMissing.call(depth0, "moment_from_now", "updatedAt", options)))), 
        data.buffer.push("</td>\n      <td>"), stack1 = helpers._triageMustache.call(depth0, "updatedBy.firstName", {
            hash: {},
            hashTypes: {},
            hashContexts: {},
            contexts: [ depth0 ],
            types: [ "ID" ],
            data: data
        }), (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("</td>\n      <td>"), 
        data.buffer.push(escapeExpression((helper = helpers.moment_from_now || depth0 && depth0.moment_from_now, 
        options = {
            hash: {},
            hashTypes: {},
            hashContexts: {},
            contexts: [ depth0 ],
            types: [ "ID" ],
            data: data
        }, helper ? helper.call(depth0, "createdAt", options) : helperMissing.call(depth0, "moment_from_now", "createdAt", options)))), 
        data.buffer.push("</td>\n      <td>"), stack1 = helpers._triageMustache.call(depth0, "createdBy.firstName", {
            hash: {},
            hashTypes: {},
            hashContexts: {},
            contexts: [ depth0 ],
            types: [ "ID" ],
            data: data
        }), (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("</td>\n      <td>\n        <div class=\"btn-group btn-group-xs\">\n          <div class='btn btn-default' "), 
        data.buffer.push(escapeExpression(helpers.action.call(depth0, "editJob", {
            hash: {},
            hashTypes: {},
            hashContexts: {},
            contexts: [ depth0 ],
            types: [ "STRING" ],
            data: data
        }))), data.buffer.push("><i class='fa fa-pencil'></i></div>\n          <div class='btn btn-danger' "), 
        data.buffer.push(escapeExpression(helpers.action.call(depth0, "deleteJob", {
            hash: {},
            hashTypes: {},
            hashContexts: {},
            contexts: [ depth0 ],
            types: [ "STRING" ],
            data: data
        }))), data.buffer.push("><i class='fa fa-eraser'></i></div>\n        </div>\n      </td>\n    </tr>\n    "), 
        buffer;
    }
    this.compilerInfo = [ 4, ">= 1.0.0" ], helpers = this.merge(helpers, Ember.Handlebars.helpers), 
    data = data || {};
    var stack1, buffer = "", helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression, self = this;
    return data.buffer.push('\n<table class="table table-hover">\n  <thead>\n    <tr>\n      <th>Name</th>\n      <th>Scheduled For</th>\n      <th>Updated</th>\n      <th>Updated By</th>\n      <th>Created</th>\n      <th>Created By</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n  '), 
    stack1 = helpers.each.call(depth0, {
        hash: {
            itemController: "job"
        },
        hashTypes: {
            itemController: "STRING"
        },
        hashContexts: {
            itemController: depth0
        },
        inverse: self.noop,
        fn: self.program(1, program1, data),
        contexts: [],
        types: [],
        data: data
    }), (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("\n  </tbody>\n</table>\n\n<div class='btn btn-success' "), 
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "createJob", {
        hash: {},
        hashTypes: {},
        hashContexts: {},
        contexts: [ depth0 ],
        types: [ "STRING" ],
        data: data
    }))), data.buffer.push('><i class="fa fa-plus"></i> Add New Job</div>\n'), buffer;
}), Ember.TEMPLATES.loading = Ember.Handlebars.template(function(Handlebars, depth0, helpers, partials, data) {
    this.compilerInfo = [ 4, ">= 1.0.0" ], helpers = this.merge(helpers, Ember.Handlebars.helpers), 
    data = data || {}, data.buffer.push('<i class="fa fa-spinner fa-spin"></i>\n');
}), Ember.TEMPLATES.user = Ember.Handlebars.template(function(Handlebars, depth0, helpers, partials, data) {
    function program1(depth0, data) {
        var stack1, buffer = "";
        return data.buffer.push("\n  "), stack1 = helpers._triageMustache.call(depth0, "name", {
            hash: {},
            hashTypes: {},
            hashContexts: {},
            contexts: [ depth0 ],
            types: [ "ID" ],
            data: data
        }), (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("<br />\n  "), 
        stack1 = helpers._triageMustache.call(depth0, "email", {
            hash: {},
            hashTypes: {},
            hashContexts: {},
            contexts: [ depth0 ],
            types: [ "ID" ],
            data: data
        }), (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("<br/>\n  <hr>  \n"), 
        buffer;
    }
    this.compilerInfo = [ 4, ">= 1.0.0" ], helpers = this.merge(helpers, Ember.Handlebars.helpers), 
    data = data || {};
    var stack1, buffer = "", self = this;
    return stack1 = helpers.each.call(depth0, {
        hash: {},
        hashTypes: {},
        hashContexts: {},
        inverse: self.noop,
        fn: self.program(1, program1, data),
        contexts: [],
        types: [],
        data: data
    }), (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("\n"), 
    buffer;
});